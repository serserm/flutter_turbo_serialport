// Autogenerated from Pigeon (v22.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.serserm.turboserialport;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.CLASS;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class PigeonSpec {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  @NonNull
  protected static FlutterError createConnectionError(@NonNull String channelName) {
    return new FlutterError("channel-error",  "Unable to establish connection on channel: " + channelName + ".", "");
  }

  @Target(METHOD)
  @Retention(CLASS)
  @interface CanIgnoreReturnValue {}

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class SerialportEvent {
    private @Nullable String type;

    public @Nullable String getType() {
      return type;
    }

    public void setType(@Nullable String setterArg) {
      this.type = setterArg;
    }

    private @Nullable Long deviceId;

    public @Nullable Long getDeviceId() {
      return deviceId;
    }

    public void setDeviceId(@Nullable Long setterArg) {
      this.deviceId = setterArg;
    }

    private @Nullable Long portInterface;

    public @Nullable Long getPortInterface() {
      return portInterface;
    }

    public void setPortInterface(@Nullable Long setterArg) {
      this.portInterface = setterArg;
    }

    private @Nullable Long errorCode;

    public @Nullable Long getErrorCode() {
      return errorCode;
    }

    public void setErrorCode(@Nullable Long setterArg) {
      this.errorCode = setterArg;
    }

    private @Nullable String errorMessage;

    public @Nullable String getErrorMessage() {
      return errorMessage;
    }

    public void setErrorMessage(@Nullable String setterArg) {
      this.errorMessage = setterArg;
    }

    private @Nullable String dataString;

    public @Nullable String getDataString() {
      return dataString;
    }

    public void setDataString(@Nullable String setterArg) {
      this.dataString = setterArg;
    }

    private @Nullable byte[] dataList;

    public @Nullable byte[] getDataList() {
      return dataList;
    }

    public void setDataList(@Nullable byte[] setterArg) {
      this.dataList = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      SerialportEvent that = (SerialportEvent) o;
      return Objects.equals(type, that.type) && Objects.equals(deviceId, that.deviceId) && Objects.equals(portInterface, that.portInterface) && Objects.equals(errorCode, that.errorCode) && Objects.equals(errorMessage, that.errorMessage) && Objects.equals(dataString, that.dataString) && Arrays.equals(dataList, that.dataList);
    }

    @Override
    public int hashCode() {
      int pigeonVar_result = Objects.hash(type, deviceId, portInterface, errorCode, errorMessage, dataString);
      pigeonVar_result = 31 * pigeonVar_result + Arrays.hashCode(dataList);
      return pigeonVar_result;
    }

    public static final class Builder {

      private @Nullable String type;

      @CanIgnoreReturnValue
      public @NonNull Builder setType(@Nullable String setterArg) {
        this.type = setterArg;
        return this;
      }

      private @Nullable Long deviceId;

      @CanIgnoreReturnValue
      public @NonNull Builder setDeviceId(@Nullable Long setterArg) {
        this.deviceId = setterArg;
        return this;
      }

      private @Nullable Long portInterface;

      @CanIgnoreReturnValue
      public @NonNull Builder setPortInterface(@Nullable Long setterArg) {
        this.portInterface = setterArg;
        return this;
      }

      private @Nullable Long errorCode;

      @CanIgnoreReturnValue
      public @NonNull Builder setErrorCode(@Nullable Long setterArg) {
        this.errorCode = setterArg;
        return this;
      }

      private @Nullable String errorMessage;

      @CanIgnoreReturnValue
      public @NonNull Builder setErrorMessage(@Nullable String setterArg) {
        this.errorMessage = setterArg;
        return this;
      }

      private @Nullable String dataString;

      @CanIgnoreReturnValue
      public @NonNull Builder setDataString(@Nullable String setterArg) {
        this.dataString = setterArg;
        return this;
      }

      private @Nullable byte[] dataList;

      @CanIgnoreReturnValue
      public @NonNull Builder setDataList(@Nullable byte[] setterArg) {
        this.dataList = setterArg;
        return this;
      }

      public @NonNull SerialportEvent build() {
        SerialportEvent pigeonReturn = new SerialportEvent();
        pigeonReturn.setType(type);
        pigeonReturn.setDeviceId(deviceId);
        pigeonReturn.setPortInterface(portInterface);
        pigeonReturn.setErrorCode(errorCode);
        pigeonReturn.setErrorMessage(errorMessage);
        pigeonReturn.setDataString(dataString);
        pigeonReturn.setDataList(dataList);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(7);
      toListResult.add(type);
      toListResult.add(deviceId);
      toListResult.add(portInterface);
      toListResult.add(errorCode);
      toListResult.add(errorMessage);
      toListResult.add(dataString);
      toListResult.add(dataList);
      return toListResult;
    }

    static @NonNull SerialportEvent fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      SerialportEvent pigeonResult = new SerialportEvent();
      Object type = pigeonVar_list.get(0);
      pigeonResult.setType((String) type);
      Object deviceId = pigeonVar_list.get(1);
      pigeonResult.setDeviceId((Long) deviceId);
      Object portInterface = pigeonVar_list.get(2);
      pigeonResult.setPortInterface((Long) portInterface);
      Object errorCode = pigeonVar_list.get(3);
      pigeonResult.setErrorCode((Long) errorCode);
      Object errorMessage = pigeonVar_list.get(4);
      pigeonResult.setErrorMessage((String) errorMessage);
      Object dataString = pigeonVar_list.get(5);
      pigeonResult.setDataString((String) dataString);
      Object dataList = pigeonVar_list.get(6);
      pigeonResult.setDataList((byte[]) dataList);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class SerialportDevice {
    private @Nullable Boolean isSupported;

    public @Nullable Boolean getIsSupported() {
      return isSupported;
    }

    public void setIsSupported(@Nullable Boolean setterArg) {
      this.isSupported = setterArg;
    }

    private @Nullable Long deviceId;

    public @Nullable Long getDeviceId() {
      return deviceId;
    }

    public void setDeviceId(@Nullable Long setterArg) {
      this.deviceId = setterArg;
    }

    private @Nullable String deviceName;

    public @Nullable String getDeviceName() {
      return deviceName;
    }

    public void setDeviceName(@Nullable String setterArg) {
      this.deviceName = setterArg;
    }

    private @Nullable Long deviceClass;

    public @Nullable Long getDeviceClass() {
      return deviceClass;
    }

    public void setDeviceClass(@Nullable Long setterArg) {
      this.deviceClass = setterArg;
    }

    private @Nullable Long deviceSubclass;

    public @Nullable Long getDeviceSubclass() {
      return deviceSubclass;
    }

    public void setDeviceSubclass(@Nullable Long setterArg) {
      this.deviceSubclass = setterArg;
    }

    private @Nullable Long deviceProtocol;

    public @Nullable Long getDeviceProtocol() {
      return deviceProtocol;
    }

    public void setDeviceProtocol(@Nullable Long setterArg) {
      this.deviceProtocol = setterArg;
    }

    private @Nullable Long vendorId;

    public @Nullable Long getVendorId() {
      return vendorId;
    }

    public void setVendorId(@Nullable Long setterArg) {
      this.vendorId = setterArg;
    }

    private @Nullable Long productId;

    public @Nullable Long getProductId() {
      return productId;
    }

    public void setProductId(@Nullable Long setterArg) {
      this.productId = setterArg;
    }

    private @Nullable String manufacturerName;

    public @Nullable String getManufacturerName() {
      return manufacturerName;
    }

    public void setManufacturerName(@Nullable String setterArg) {
      this.manufacturerName = setterArg;
    }

    private @Nullable String productName;

    public @Nullable String getProductName() {
      return productName;
    }

    public void setProductName(@Nullable String setterArg) {
      this.productName = setterArg;
    }

    private @Nullable String serialNumber;

    public @Nullable String getSerialNumber() {
      return serialNumber;
    }

    public void setSerialNumber(@Nullable String setterArg) {
      this.serialNumber = setterArg;
    }

    private @Nullable Long interfaceCount;

    public @Nullable Long getInterfaceCount() {
      return interfaceCount;
    }

    public void setInterfaceCount(@Nullable Long setterArg) {
      this.interfaceCount = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      SerialportDevice that = (SerialportDevice) o;
      return Objects.equals(isSupported, that.isSupported) && Objects.equals(deviceId, that.deviceId) && Objects.equals(deviceName, that.deviceName) && Objects.equals(deviceClass, that.deviceClass) && Objects.equals(deviceSubclass, that.deviceSubclass) && Objects.equals(deviceProtocol, that.deviceProtocol) && Objects.equals(vendorId, that.vendorId) && Objects.equals(productId, that.productId) && Objects.equals(manufacturerName, that.manufacturerName) && Objects.equals(productName, that.productName) && Objects.equals(serialNumber, that.serialNumber) && Objects.equals(interfaceCount, that.interfaceCount);
    }

    @Override
    public int hashCode() {
      return Objects.hash(isSupported, deviceId, deviceName, deviceClass, deviceSubclass, deviceProtocol, vendorId, productId, manufacturerName, productName, serialNumber, interfaceCount);
    }

    public static final class Builder {

      private @Nullable Boolean isSupported;

      @CanIgnoreReturnValue
      public @NonNull Builder setIsSupported(@Nullable Boolean setterArg) {
        this.isSupported = setterArg;
        return this;
      }

      private @Nullable Long deviceId;

      @CanIgnoreReturnValue
      public @NonNull Builder setDeviceId(@Nullable Long setterArg) {
        this.deviceId = setterArg;
        return this;
      }

      private @Nullable String deviceName;

      @CanIgnoreReturnValue
      public @NonNull Builder setDeviceName(@Nullable String setterArg) {
        this.deviceName = setterArg;
        return this;
      }

      private @Nullable Long deviceClass;

      @CanIgnoreReturnValue
      public @NonNull Builder setDeviceClass(@Nullable Long setterArg) {
        this.deviceClass = setterArg;
        return this;
      }

      private @Nullable Long deviceSubclass;

      @CanIgnoreReturnValue
      public @NonNull Builder setDeviceSubclass(@Nullable Long setterArg) {
        this.deviceSubclass = setterArg;
        return this;
      }

      private @Nullable Long deviceProtocol;

      @CanIgnoreReturnValue
      public @NonNull Builder setDeviceProtocol(@Nullable Long setterArg) {
        this.deviceProtocol = setterArg;
        return this;
      }

      private @Nullable Long vendorId;

      @CanIgnoreReturnValue
      public @NonNull Builder setVendorId(@Nullable Long setterArg) {
        this.vendorId = setterArg;
        return this;
      }

      private @Nullable Long productId;

      @CanIgnoreReturnValue
      public @NonNull Builder setProductId(@Nullable Long setterArg) {
        this.productId = setterArg;
        return this;
      }

      private @Nullable String manufacturerName;

      @CanIgnoreReturnValue
      public @NonNull Builder setManufacturerName(@Nullable String setterArg) {
        this.manufacturerName = setterArg;
        return this;
      }

      private @Nullable String productName;

      @CanIgnoreReturnValue
      public @NonNull Builder setProductName(@Nullable String setterArg) {
        this.productName = setterArg;
        return this;
      }

      private @Nullable String serialNumber;

      @CanIgnoreReturnValue
      public @NonNull Builder setSerialNumber(@Nullable String setterArg) {
        this.serialNumber = setterArg;
        return this;
      }

      private @Nullable Long interfaceCount;

      @CanIgnoreReturnValue
      public @NonNull Builder setInterfaceCount(@Nullable Long setterArg) {
        this.interfaceCount = setterArg;
        return this;
      }

      public @NonNull SerialportDevice build() {
        SerialportDevice pigeonReturn = new SerialportDevice();
        pigeonReturn.setIsSupported(isSupported);
        pigeonReturn.setDeviceId(deviceId);
        pigeonReturn.setDeviceName(deviceName);
        pigeonReturn.setDeviceClass(deviceClass);
        pigeonReturn.setDeviceSubclass(deviceSubclass);
        pigeonReturn.setDeviceProtocol(deviceProtocol);
        pigeonReturn.setVendorId(vendorId);
        pigeonReturn.setProductId(productId);
        pigeonReturn.setManufacturerName(manufacturerName);
        pigeonReturn.setProductName(productName);
        pigeonReturn.setSerialNumber(serialNumber);
        pigeonReturn.setInterfaceCount(interfaceCount);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(12);
      toListResult.add(isSupported);
      toListResult.add(deviceId);
      toListResult.add(deviceName);
      toListResult.add(deviceClass);
      toListResult.add(deviceSubclass);
      toListResult.add(deviceProtocol);
      toListResult.add(vendorId);
      toListResult.add(productId);
      toListResult.add(manufacturerName);
      toListResult.add(productName);
      toListResult.add(serialNumber);
      toListResult.add(interfaceCount);
      return toListResult;
    }

    static @NonNull SerialportDevice fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      SerialportDevice pigeonResult = new SerialportDevice();
      Object isSupported = pigeonVar_list.get(0);
      pigeonResult.setIsSupported((Boolean) isSupported);
      Object deviceId = pigeonVar_list.get(1);
      pigeonResult.setDeviceId((Long) deviceId);
      Object deviceName = pigeonVar_list.get(2);
      pigeonResult.setDeviceName((String) deviceName);
      Object deviceClass = pigeonVar_list.get(3);
      pigeonResult.setDeviceClass((Long) deviceClass);
      Object deviceSubclass = pigeonVar_list.get(4);
      pigeonResult.setDeviceSubclass((Long) deviceSubclass);
      Object deviceProtocol = pigeonVar_list.get(5);
      pigeonResult.setDeviceProtocol((Long) deviceProtocol);
      Object vendorId = pigeonVar_list.get(6);
      pigeonResult.setVendorId((Long) vendorId);
      Object productId = pigeonVar_list.get(7);
      pigeonResult.setProductId((Long) productId);
      Object manufacturerName = pigeonVar_list.get(8);
      pigeonResult.setManufacturerName((String) manufacturerName);
      Object productName = pigeonVar_list.get(9);
      pigeonResult.setProductName((String) productName);
      Object serialNumber = pigeonVar_list.get(10);
      pigeonResult.setSerialNumber((String) serialNumber);
      Object interfaceCount = pigeonVar_list.get(11);
      pigeonResult.setInterfaceCount((Long) interfaceCount);
      return pigeonResult;
    }
  }

  private static class PigeonCodec extends StandardMessageCodec {
    public static final PigeonCodec INSTANCE = new PigeonCodec();

    private PigeonCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 129:
          return SerialportEvent.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return SerialportDevice.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof SerialportEvent) {
        stream.write(129);
        writeValue(stream, ((SerialportEvent) value).toList());
      } else if (value instanceof SerialportDevice) {
        stream.write(130);
        writeValue(stream, ((SerialportDevice) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }


  /** Asynchronous error handling return type for non-nullable API method returns. */
  public interface Result<T> {
    /** Success case callback method for handling returns. */
    void success(@NonNull T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for nullable API method returns. */
  public interface NullableResult<T> {
    /** Success case callback method for handling returns. */
    void success(@Nullable T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for void API method returns. */
  public interface VoidResult {
    /** Success case callback method for handling returns. */
    void success();

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface TurboSerialport {

    void addListener();

    void removeListener();

    void init(@NonNull Boolean autoConnect, @NonNull Long mode, @NonNull String driver, @NonNull Long portInterface, @NonNull Long returnedDataType, @NonNull Long baudRate, @NonNull Long dataBit, @NonNull Long stopBit, @NonNull Long parity, @NonNull Long flowControl);

    void setParams(@NonNull Long deviceId, @NonNull String driver, @NonNull Long portInterface, @NonNull Long returnedDataType, @NonNull Long baudRate, @NonNull Long dataBit, @NonNull Long stopBit, @NonNull Long parity, @NonNull Long flowControl);

    void listDevices(@NonNull Result<List<SerialportDevice>> result);

    void connect(@NonNull Long deviceId);

    void disconnect(@NonNull Long deviceId);

    void isConnected(@NonNull Long deviceId, @NonNull Result<Boolean> result);

    void isServiceStarted(@NonNull Result<Boolean> result);

    void writeBytes(@NonNull Long deviceId, @NonNull Long portInterface, @NonNull byte[] message);

    void writeString(@NonNull Long deviceId, @NonNull Long portInterface, @NonNull String message);

    void writeBase64(@NonNull Long deviceId, @NonNull Long portInterface, @NonNull String message);

    void writeHexString(@NonNull Long deviceId, @NonNull Long portInterface, @NonNull String message);

    /** The codec used by TurboSerialport. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    /**Sets up an instance of `TurboSerialport` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable TurboSerialport api) {
      setUp(binaryMessenger, "", api);
    }
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @NonNull String messageChannelSuffix, @Nullable TurboSerialport api) {
      messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_turbo_serialport.TurboSerialport.addListener" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                try {
                  api.addListener();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_turbo_serialport.TurboSerialport.removeListener" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                try {
                  api.removeListener();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_turbo_serialport.TurboSerialport.init" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Boolean autoConnectArg = (Boolean) args.get(0);
                Long modeArg = (Long) args.get(1);
                String driverArg = (String) args.get(2);
                Long portInterfaceArg = (Long) args.get(3);
                Long returnedDataTypeArg = (Long) args.get(4);
                Long baudRateArg = (Long) args.get(5);
                Long dataBitArg = (Long) args.get(6);
                Long stopBitArg = (Long) args.get(7);
                Long parityArg = (Long) args.get(8);
                Long flowControlArg = (Long) args.get(9);
                try {
                  api.init(autoConnectArg, modeArg, driverArg, portInterfaceArg, returnedDataTypeArg, baudRateArg, dataBitArg, stopBitArg, parityArg, flowControlArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_turbo_serialport.TurboSerialport.setParams" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long deviceIdArg = (Long) args.get(0);
                String driverArg = (String) args.get(1);
                Long portInterfaceArg = (Long) args.get(2);
                Long returnedDataTypeArg = (Long) args.get(3);
                Long baudRateArg = (Long) args.get(4);
                Long dataBitArg = (Long) args.get(5);
                Long stopBitArg = (Long) args.get(6);
                Long parityArg = (Long) args.get(7);
                Long flowControlArg = (Long) args.get(8);
                try {
                  api.setParams(deviceIdArg, driverArg, portInterfaceArg, returnedDataTypeArg, baudRateArg, dataBitArg, stopBitArg, parityArg, flowControlArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_turbo_serialport.TurboSerialport.listDevices" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                Result<List<SerialportDevice>> resultCallback =
                    new Result<List<SerialportDevice>>() {
                      public void success(List<SerialportDevice> result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.listDevices(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_turbo_serialport.TurboSerialport.connect" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long deviceIdArg = (Long) args.get(0);
                try {
                  api.connect(deviceIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_turbo_serialport.TurboSerialport.disconnect" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long deviceIdArg = (Long) args.get(0);
                try {
                  api.disconnect(deviceIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_turbo_serialport.TurboSerialport.isConnected" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long deviceIdArg = (Long) args.get(0);
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.isConnected(deviceIdArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_turbo_serialport.TurboSerialport.isServiceStarted" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.isServiceStarted(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_turbo_serialport.TurboSerialport.writeBytes" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long deviceIdArg = (Long) args.get(0);
                Long portInterfaceArg = (Long) args.get(1);
                byte[] messageArg = (byte[]) args.get(2);
                try {
                  api.writeBytes(deviceIdArg, portInterfaceArg, messageArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_turbo_serialport.TurboSerialport.writeString" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long deviceIdArg = (Long) args.get(0);
                Long portInterfaceArg = (Long) args.get(1);
                String messageArg = (String) args.get(2);
                try {
                  api.writeString(deviceIdArg, portInterfaceArg, messageArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_turbo_serialport.TurboSerialport.writeBase64" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long deviceIdArg = (Long) args.get(0);
                Long portInterfaceArg = (Long) args.get(1);
                String messageArg = (String) args.get(2);
                try {
                  api.writeBase64(deviceIdArg, portInterfaceArg, messageArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_turbo_serialport.TurboSerialport.writeHexString" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long deviceIdArg = (Long) args.get(0);
                Long portInterfaceArg = (Long) args.get(1);
                String messageArg = (String) args.get(2);
                try {
                  api.writeHexString(deviceIdArg, portInterfaceArg, messageArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class TurboSerialportListener {
    private final @NonNull BinaryMessenger binaryMessenger;
    private final String messageChannelSuffix;

    public TurboSerialportListener(@NonNull BinaryMessenger argBinaryMessenger) {
      this(argBinaryMessenger, "");
    }
    public TurboSerialportListener(@NonNull BinaryMessenger argBinaryMessenger, @NonNull String messageChannelSuffix) {
      this.binaryMessenger = argBinaryMessenger;
      this.messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
    }

    /**
     * Public interface for sending reply.
     * The codec used by TurboSerialportListener.
     */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    public void serialportEvent(@NonNull SerialportEvent eventArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.flutter_turbo_serialport.TurboSerialportListener.serialportEvent" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Collections.singletonList(eventArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
  }
}
